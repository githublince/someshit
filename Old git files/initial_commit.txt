Text file
 
 >> git add . will stage all the files to staging area.
 >> you cannot create a branch before commiting i.e. having uncommited dependencies

>>> Creating a branch
        git branch <branch_name> (to create branch where the HEAD is)
        git checkout -b <branch_name> or <commit id>



 >>> After creating a branch we need to switch to that branch to retain the changes
        git switch -c "branch1"

 >>> To change branch ( willnot work if not committed)
        git checkout <commit id/ branch_name>

>>> to get commit list
        git log


>>> to get status of uncommitted or untracked dependencies
        git status

>>> to delete a branch 
        git branch -d <branch_name>
        git branch -D <branch name> (can delete branches which didnot merge)


>>> to visualy see topoloigy of git log
        git log --graph --decorate --oneline

>>> TO SEE WHERE THE HEAD IS 

        cat .git/HEAD
        ref: refs/heads/jkl_main_branch

>>> Adding to the staging area
        git add <FILENAME>
        git add . (FOR ALL FILES)


>>> Removing from the staging area
        git restore --staged <FILENAME>
        git restore --staged . (FOR ALL FILES)

>>> undoing unstaged changes
        git checkout <FILENAME>
        git checkout . (FOR ALL FILES)

>>> redoing unstaged changes
        git checkout -- <FILENAME>
        git checkout -- . (FOR ALL FILES)


>>> To see all committed files.
        git ls-files

!!! Types of RESET !!!

1) SOFT RESET 2) DEFAULT RESET 3) HARD RESET


>>> SOFT RESET : 
                * Last commit is removed 
                * The newly created file still exist in staging area
        git reset --soft HEAD-1

>>> DEFAULT RESET: 
                * Last commit is removed
                * Newly added files will be removed from staging area
                
        git reset HEAD-1

>> HARD RESET: (be very cautious)
                * Last commit is removed
                * Newly added files will be deleted permanently
                * All files are restored to previous commit. i.e. changes discarded
        git reset --soft HEAD-1

>>> To delete a branch
        git branch -d <branch_name> (for merged branch) 
        git branch -D <branch_name> (for unmerged branch)
        git branch -D <branch_name_1> <branch_name_2> ...(for multiple branches)

>>> To let .gitignore work, initially we have to run following commands\
        git rm -r --cached .
        git add .
        git commit -m "fixed untracked files"

>>>TO SET GITHUB

https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed-please-use-a-personal


>>> setting connection to remote repository GITHUB
        git remote add origin <URL>

>>> pushing  to remote repository
        git remote push origin <URL>

>>> pulling from remote repository
        git remote pull origin <URL>


